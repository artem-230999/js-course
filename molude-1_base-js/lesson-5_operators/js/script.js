"use strict"

/** Операторы
 * Конкатинация - переобразование в строчный тип данных
console.log('arr' + " - object"); // строка
console.log(4 + " - object"); // строка
 * Если перед строкой поставить + - то она попытается переобразоватся в число. Если не получится, то будет NaN
+" - object"
console.log(4 + +"5"); // число
 * +, который ставится перед чем-то наз унарным плюсом


 * инкремент и дикремент. Префексная форма и постфиксная форма
 * Префексная форма. оператор инкремента (увеличение на 1). оператор дикремента (уменшает на 1).
incr++;
decr--;
 * постфиксная форма. оператор инкремента (увеличение на 1). оператор дикремента (уменшает на 1).
++incr;
--decr;
 * Отличие например, когда при выводе в консоль добавляется инкремент или дикремент в постфиксная форма. Переменная не меняется, так как сначало она выводится, а потом к ней прибавляется что-то. Но при повторном выводе переменной, операция уже произошла. Поэтому, чтобы сработал оператор при выводе, нужно использовать префексную форму 
    console.log(`incr: ${incr++}`);
    console.log(`decr: ${decr--}`);
    console.log(`incr: ${incr}`);
    console.log(`decr: ${decr}`);


 * Операторы
 * %(остаток от деления)
    console.log(30 % 7);
 * = - не равно, а присваивание.
 * == - равно. Приведение типа строки в число
console.log(2*4 == '8'); // true
* === - строгое равно
console.log(2*4 == '8'); // false

* || - логичесое или. 
* && - and.

* Как false может быть 
NaN, '', false, 0

Как true - ' ', 


* ! - not
* != - не равно с привидением типов
* !== - не равно строгое
console.log(5 != '5'); // false
console.log(5 !== '5'); // true


* Есть приоритет выполнения операторов. Например умножение выполняется раньше чем сложение. Сначало то, что в фигурных скобках. 
https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_precedence#Table

* Побитовые операторы
https://learn.javascript.ru/bitwise-operators 
* 
* 
 */


console.log(2 + 2 * 2 === 8);

