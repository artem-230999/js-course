/** Класификация типов данных в JS
 * Класификация делится на простые типы и обьекты
 * Простые - number, string, boolean, null, undefined, Symbol, BigInt
 * Обьекты -ОБЫЧНЫЕ {}. 
 * Спец. Объекты - Массивы, функции, объект дат, Решулярные выражения, Ошибки
  
 * typeof - Оператор, чтобы узнать тип данных
  console.log(typeof 55);
 
 * простые типы
 * number - число. Может быть как целым как и дробным. Есть ограничение на максимальное число, но для больших чисел используется тип данных BigInt.
 * Есть специальные типы как NaN (не число) и infinity (бесконечность) можно получить при делении на 0
 * Примеры
   console.log(Infinity); /* Infinity
   console.log(Infinity + 1); /* Infinity
   console.log(10 ** 1000); /* Infinity
   console.log(Math.log(0)); /* -Infinity
   console.log(1 / Infinity); /* 0
   console.log(1 / 0); /* Infinity
   console.log(-1 * Infinity); /* 0
   console.log(-1 * Infinity); /* -Infinity
   console.log(-4 / 0); /* -Infinity

   console.log('ds' * 9); //NaN
   
   * String - Записываестя в кавычках
   let name = 'Artem'
   
   * Boolean - имеет только 2 значения. true и false.
   let bool = true;
   let bool2 = false;

   * Null - когда чего-то просто не существует. Является объектом - это ошибка самого языка JS
   console.log(hello); // Uncaught ReferenceError: hello is not defined - ошибка ссылочного типа. Не может сослатся на не существующий обьект.

   * Undefined - Когда значение существует, но оно не определено.
   let und;
   console.log(und); // undefined

   * Symbol - на практике почти не используется
   
   * BigInt - на практике редко не используется.

   * Объект - колекция данных. Структура, которая используеться для хранения любых данных.
    В нем могут содержатся все типа
    const obj = {
     name: 'Artem',
     age: 25,
     city: "Prague",
     isMarried: false,
     skills: ['html', 'css', 'js', 'git']
    }
    console.log(obj);
    * Как добраться до определенного свойства обьекта.
    * Через точку
    console.log(obj.name);
    console.log(obj.city);

    * Квадратные скобки
    * Так будет ошибка
    console.log(obj[name]);
    console.log(obj[city]);
    * Надо обращатся через кавычки
   onsole.log(obj['name']);

  * Обьекты ключевая единица JS в них хранится очень много инфоррмации

  * Массив - это не отдельный тип данных, а спец. обьект. В него можно поместить любой тип данных
   let arr = ['html', 'css', 'js', 'git'];
   * Для обращения к масиву по порядку. Порядок начинается с 0
   console.log(arr[0]);

   * Объекты и массивы использует формат ключ: значение. Просто у массива этот ключ - это его порядковый номер.

   * Бэктик - косые кавычки. В них можно записывать переменные.
   console.log(`I am ${num}`);
   */
  


// Есть возможность узнать побольше о BigInt. Symbol.
/**
 * https://medium.com/@hydrock/bigint-%D0%BD%D0%BE%D0%B2%D1%8B%D0%B9-%D1%82%D0%B8%D0%BF-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B2-js-dd5c29446570
 * https://learn.javascript.ru/symbol
 */




/** Разница между объектами и массивами. Неочевидные синтаксические особенности
 * Ключевая разница между масивами и объектами в синтаксическом, логическом и ф-ном плане.
 * Массивы перечень информации по порядку. Тоесть у каждой сузности есть порядковый номер по порядку. 0, 1, 2...
 * По эти номерам можем обращатся к этим сущностям
const arr = [1, 2, 3];

 * Объекты- структурное хранение данных в формате ключ: значение.
const obj = {a: 1, b: 2, c: 3};
 * Ключ объекта можно записывать как в кавычка, так и без них. Чаще всего пишут без кавычек.
const obj = {
  'Anna': 500,
  Alice: 800
}
console.log(obj.Anna);

 * Массивы имеют свои методы и свойства. Например: метод по перебору, добавлению, удалению, свойство длины и т.д.
 * Объекты же имеют свои методы и свойства.
 
 * При обращении к ключу объекта, который начинается с цифры нужно обращатся через квадратные скобки.
const arr = [1, 2, 3];
const arrObj = {
  0: 1,
  1: 2,
  2: 3
}
console.log(arrObj[0]);
console.log(arrObj[2]);
console.log(arrObj[1]);

 * Синтаксические особености.
 * Обращение через [] будет надежнее
  
 * Изменение елемента объекта
const arr = [1, 2, 3];
const arrObj = {
  a: 1,
  1: 2,
  имя: 3
}
arrObj['a'] = 1234;
console.log(arrObj.a);

*  Когда обращаемся без кавычек, то js думает что мы обращаемся к какой-то переменной.
rrObj[a] = 1234;

* Пример добавления елемента в конец объекта при помощи переменной 
const arr = [1, 2, 3];
const arrObj = {
  a: 1,
  1: 2,
  имя: 3
}
const b = 'b';
arrObj[b] = 151546654465456465654646546546545312;
console.log(arrObj);
* Важно знать для формирования динамической базы данных

* Пример добавления в массив. В массив добавен елемент на позицию 10, но образовалось пустое пространство между 10 и теми что рангьше.
* Пустые ячейки, которые не содержат никакойинформации. И это нарушает логику масива.
const arr = [1, 2, 3];
arr[10] = 11;
console.log(arr);
* 
* 
* 
* 
*/


const arr = [1, 2, 3];

arr[10] = 11;

console.log(arr);


