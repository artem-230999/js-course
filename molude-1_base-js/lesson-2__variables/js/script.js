// Переменные и строгий режим
/** С цыфры не можем начинать или символа. Можно с _ и $
 let number = 5;
const name = 'Artem';

number = 10;
console.log(number);
 * Современный формат это let, const. var не используется
 * = (это знак присваивания)
 * Названия в пременных не должны повторять слова зарезервированые в языке
 * Переменные пишуться сначало с маленькой буквы, а дальше с большой name, firstName
 * Пременные обьявленные через let можно перезаписывать number = 10;
 *
 2. Пременные обьявленные через const можно изменить, если в ней содержится обьект. Вот пример:
 const obj = {
  a: 50
}

obj.a = 10;
console.log(obj);

 * Вывод в том, что прямых констант в js не бывает.

3. Устаревший формат записи и еого проблемы. В старых проектах может встретится.
  * var можно перезвписывать
var hello = 'Hello'
console.log(hello = 'hi');

  * Остновная его проблема, это что переменная существует еще до того, как она была обьявлена в коде. Также видна она везде. Пример:
console.log(hello);
var hello = 'Hello'
  * Можна вывести до того как она была написана.

  * С let уже будет ошибка. Как и с const
console.log(hello);
let hello = 'Hello'

  * Такое поведение var, когда можем использовать пременную до ее обьявления называеться всплытие переменной. (hoisting) - это поведение, при котором объявления переменных и функций кажутся "поднятыми" в начало текущей области видимости, то есть они как бы перемещаются в начало кода. Это означает, что вы можете использовать переменную или функцию до того, как она была явно объявлена в вашем коде. Однако, важно понимать, что на самом деле, происходит не физическое перемещение кода, а скорее то, что объявления обрабатываются на этапе компиляции.
  * В больших проэктах это путает. поэтому var нес используется. использоание современного формата позволяет избежать ошибок.

  4. let и const видны только в блоке кода с ограничеными скобками {}. Это называеться блочная область видимости. var же имеет ф-ную область видимости.
  * Пример
{
  let result = 50;
}
console.log(result); // Uncaught ReferenceError: result is not defined

{
  const result = 50;
}
console.log(result); // Uncaught ReferenceError: result is not defined

 * С var все работает и ошибок нет
{
  var result = 50;
}
console.log(result);


  * "use strict"; - формат в котором исключены некоторые неточности JS. "use strict"; - строгий современный код.
  * Например можно было вывести переменнуюне обьявляя ее. Но с этим режимом нельзя
a = 15;
console.log(a);
  * Важно прописывать эту дерективу "use strict"; в начале документа или ф-ции

 */
// "use strict";



/** Правила и типы названия переменных
 * Важно придумывать название переменной, которое харашо описывает, что в ней хранится и что она делает.
const fullNameUser = 'Artem Abramov';
let ageUser = 25;

* Пример с урока
const veicleBodyWidth = 5000;
const veicleBodyLength = 4000;

console.log("Ширина кузова автомобиля " + veicleBodyWidth + ", длина " + veicleBodyLength); 

* сдесть переменная просто item, так как тех клас
['svfdvfv', 'dsfsdsf', 'fjhgh'].map( item => )


* Стили snake_case, UPPER_SNAKE_CASE 
UPPER_SNAKE_CASE - ТАК ОБОЗНАЧАЮТ ПЕРЕМЕННЫЕ, КОТОРЫЕ НЕЛЬЗЯ ПЕРЕЗНАЧАТЬ.
* kebab-case
* PascalCase
*/

/** Задание на создание правильных переменных
// Создайте переменную, которая будет отображать имя пользователя. (Пользователь - user, имя - name). В неё поместите значение "John"
// На следующей строке создайте переменную, отображающую номер пользователя (номер - number). В неё поместите значение 25.
// Измените значение второй переменной с 25 на 24 на следующей строке.

// Ваше решение
const userName = 'John';
let userNumber = 25;

userNumber = 24;
 */